import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface GeminiRequest {
  action: 'explicar' | 'exemplo' | 'apresentar';
  article: string;
  articleNumber: string;
  codeName: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('=== GEMINI VADEMECUM FUNCTION STARTED ===');
    
    const { action, article, articleNumber, codeName }: GeminiRequest = await req.json();
    
    console.log('Request received:', { 
      action, 
      articleNumber,
      codeName,
      hasArticle: !!article
    });
    
    // Use the API key provided by user
    const geminiApiKey = 'AIzaSyARKbLg6juoX5gOnDdsZgAt217z20s08GA';
    console.log('‚úÖ Using Gemini API Key');

    let prompt = '';
    
    switch (action) {
      case 'explicar':
        prompt = `Explique de forma did√°tica e detalhada o seguinte artigo de lei:

${codeName} - Art. ${articleNumber}
${article}

Por favor, forne√ßa uma explica√ß√£o completa que inclua:
1. **O que o artigo significa** em linguagem simples
2. **Situa√ß√µes pr√°ticas** onde ele se aplica
3. **Termos t√©cnicos** explicados de forma clara
4. **Import√¢ncia jur√≠dica** no ordenamento brasileiro

Use formata√ß√£o markdown limpa e seja did√°tico. N√£o use slides ou apresenta√ß√µes.`;
        break;
        
      case 'exemplo':
        prompt = `Forne√ßa exemplos pr√°ticos e casos concretos para o seguinte artigo de lei:

${codeName} - Art. ${articleNumber}
${article}

Por favor, inclua:

## **Exemplos Pr√°ticos**
1. **Exemplo 1**: [situa√ß√£o do dia a dia]
2. **Exemplo 2**: [caso hipot√©tico realista]
3. **Exemplo 3**: [aplica√ß√£o pr√°tica]

## **Casos Ilustrativos**
- Situa√ß√µes onde o artigo protege direitos
- Contextos de aplica√ß√£o no cotidiano
- Consequ√™ncias jur√≠dicas pr√°ticas

Use formata√ß√£o markdown limpa e seja espec√≠fico nos exemplos. N√£o use slides.`;
        break;
        
      case 'apresentar':
        prompt = `Crie um resumo estruturado sobre o seguinte artigo de lei:

${codeName} - Art. ${articleNumber}
${article}

Estruture o conte√∫do em markdown da seguinte forma:

# **${codeName} - Art. ${articleNumber}**

## **Texto do Artigo**
[reproduza o artigo na √≠ntegra]

## **Explica√ß√£o Simplificada**
[o que significa em linguagem clara]

## **Aplica√ß√£o Pr√°tica**
[quando e onde se aplica]

## **Exemplos Concretos**
[2-3 exemplos pr√°ticos do cotidiano]

## **Import√¢ncia Jur√≠dica**
[por que √© importante e como protege direitos]

Use formata√ß√£o markdown limpa e organizada. Seja did√°tico e pr√°tico.`;
        break;
    }

    console.log('üì® Making request to Gemini API...');
    
    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': geminiApiKey,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              { text: prompt }
            ]
          }
        ],
        systemInstruction: {
          parts: [
            {
              text: `Voc√™ √© um professor de Direito especializado em ensino did√°tico. 

Sempre responda de forma:
- Clara e did√°tica
- Com exemplos pr√°ticos quando solicitado
- Usando formata√ß√£o markdown limpa
- Adequada para estudantes e profissionais
- Em portugu√™s brasileiro
- SEM usar slides ou apresenta√ß√µes
- Com conte√∫do copi√°vel e bem estruturado

NUNCA use formata√ß√£o de slides. Use apenas markdown padr√£o com t√≠tulos, listas e texto corrido.`
            }
          ]
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      throw new Error(`Erro na API Gemini: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('Resposta inv√°lida da API Gemini');
    }

    const aiResponse = data.candidates[0].content.parts[0].text;

    console.log('‚úÖ Gemini response received');

    return new Response(
      JSON.stringify({ 
        content: aiResponse,
        success: true 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error: any) {
    console.error('Error in gemini-vademecum function:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error?.message || 'Erro interno do servidor',
        success: false 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});